// filepath: c:\Users\zackweb\Desktop\Dailly\src\renderer\src\components\JournalList.jsx
import React, { useState, useEffect } from "react";
import { Link } from "react-router-dom";
import { format, isValid } from "date-fns";
import { EnhancedCard } from "./EnhancedCardEffects";
import CategoryDisplay from "./CategoryDisplay";
import { FiSearch, FiX, FiFilter, FiRefreshCw, FiChevronDown, FiTag, FiEdit, FiTrash2 } from "react-icons/fi";
import "./enhanced-card.css";
import "./date-and-categories.css";
import "./advanced-filters.css";
import "./action-icons.css";

// Modern edit and delete icons using react-icons instead of SVGs
function EditIcon() {
  return <FiEdit className="action-icon" />
}

function DeleteIcon() {
  return <FiTrash2 className="action-icon" />
}

function JournalList() {
  const [entries, setEntries] = useState([]);
  const [filteredEntries, setFilteredEntries] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedCategory, setSelectedCategory] = useState("");
  const [categories, setCategories] = useState([]);
  const [isFiltering, setIsFiltering] = useState(false);
  const [sortDirection, setSortDirection] = useState("desc"); // "desc" = newest first, "asc" = oldest first
  const [showSearchPing, setShowSearchPing] = useState(false);
  
  useEffect(() => {
    loadEntries();
  }, []);
  
  useEffect(() => {
    filterEntries();
    // Check if any filters are applied
    setIsFiltering(searchTerm !== "" || selectedCategory !== "");
  }, [searchTerm, selectedCategory, entries]);
  
  const loadEntries = async () => {
    try {
      const allEntries = await window.api.journal.getAll();
      
      // Parse frontmatter manually
      const parsedEntries = allEntries.map((entry) => {
        const lines = entry.content.split("\n");
        let frontMatterFound = false;
        let frontMatterEnd = -1;
        let title = "Untitled Entry";
        let date = new Date();
        let categories = [];
        
        // Find YAML frontmatter between --- markers
        if (lines[0] === "---") {
          frontMatterFound = true;
          for (let i = 1; i < lines.length; i++) {
            if (lines[i] === "---") {
              frontMatterEnd = i;
              break;
            }
            
            const line = lines[i];
            if (line.startsWith("title:")) {
              title = line.substring(6).trim();
            } else if (line.startsWith("date:")) {
              const dateStr = line.substring(5).trim();
              date = new Date(dateStr);
            } else if (line.startsWith("categories:")) {
              const catText = line.substring(11).trim();
              if (catText.startsWith("[") && catText.endsWith("]")) {
                categories = catText
                  .slice(1, -1)
                  .split(",")
                  .map((c) => c.trim());
              }
            }
          }
        }
        
        // Extract content after frontmatter
        let content = entry.content;
        if (frontMatterFound && frontMatterEnd > 0) {
          content = lines.slice(frontMatterEnd + 1).join("\n");
        }
        
        return {
          ...entry,
          title,
          date,
          categories,
          excerpt: content.substring(0, 100) + (content.length > 100 ? "..." : ""),
          parsed: true
        };
      });
      
      // Sort by date (newest first)
      parsedEntries.sort((a, b) => new Date(b.date) - new Date(a.date));
      
      setEntries(parsedEntries);
      setFilteredEntries(parsedEntries); // Initialize filtered entries with all entries
      
      // Extract unique categories
      const allCategories = new Set();
      parsedEntries.forEach((entry) => {
        if (Array.isArray(entry.categories)) {
          entry.categories.forEach((cat) => allCategories.add(cat));
        }
      });
      setCategories([...allCategories]);
    } catch (error) {
      console.error("Failed to load entries:", error);
    }
  };
  
  const filterEntries = () => {
    let filtered = [...entries];
    
    // Filter by search term
    if (searchTerm && searchTerm.trim() !== "") {
      const searchLower = searchTerm.toLowerCase().trim();
      filtered = filtered.filter((entry) => 
        (entry.title && entry.title.toLowerCase().includes(searchLower)) || 
        (entry.content && entry.content.toLowerCase().includes(searchLower)) ||
        (entry.excerpt && entry.excerpt.toLowerCase().includes(searchLower))
      );
    }
    
    // Filter by category
    if (selectedCategory) {
      filtered = filtered.filter((entry) => 
        Array.isArray(entry.categories) && entry.categories.includes(selectedCategory)
      );
    }
    
    console.log("Filtering entries:", {
      searchTerm,
      selectedCategory,
      totalEntries: entries.length,
      filteredCount: filtered.length
    });
    
    setFilteredEntries(filtered);
  };
  
  // Enhanced date formatting function with more beautiful output
  const formatDate = (dateValue) => {
    // Check if the date is valid first
    const date = new Date(dateValue);
    if (!dateValue || !isValid(date)) {
      return "No date";
    }
    try {
      const day = format(date, "d");
      const month = format(date, "MMM");
      const year = format(date, "yyyy");
      
      // Return a structured date format that can be styled more beautifully
      return (
        <span className="beautiful-date">
          <span className="date-day">{day}</span>
          <span className="date-month-year">
            <span className="date-month">{month}</span>
            <span className="date-year">{year}</span>
          </span>
        </span>
      );
    } catch (error) {
      console.error("Date formatting error:", error);
      return "Invalid date";
    }
  };

  const handleSearch = (e) => {
    setSearchTerm(e.target.value);
  };
  
  // State for search ping animation
  const [showSearchPing, setShowSearchPing] = useState(false);
  // State for sort direction
  const [sortDirection, setSortDirection] = useState("desc"); // "desc" = newest first, "asc" = oldest first

  // Handle search with animation
  const handleSearchWithAnimation = (e) => {
    handleSearch(e);
    setShowSearchPing(true);
    setTimeout(() => setShowSearchPing(false), 800); // Animation duration
  };
  
  // Toggle sort direction
  const toggleSortDirection = () => {
    const newDirection = sortDirection === "desc" ? "asc" : "desc";
    setSortDirection(newDirection);
    
    // Re-sort entries
    const sorted = [...filteredEntries].sort((a, b) => {
      const comparison = new Date(a.date) - new Date(b.date);
      return newDirection === "asc" ? comparison : -comparison;
    });
    
    setFilteredEntries(sorted);
  };
  
  const handleDelete = async (id, e) => {
    e.preventDefault();
    e.stopPropagation();
    
    if (confirm("Are you sure you want to delete this entry?")) {
      try {
        await window.api.journal.deleteEntry(id);
        loadEntries();
      } catch (error) {
        console.error("Failed to delete entry:", error);
      }
    }
  };

  return (
    <div className="journal-list">
      <div className="filters-container">
        <div className={`filters ${isFiltering ? "has-filters active" : ""}`}>
          {isFiltering && <div className="filter-active-indicator"></div>}
          
          <div className="search-container">
            <input
              type="text"
              placeholder="Search entries..."
              value={searchTerm}
              onChange={handleSearchWithAnimation}
              className="search-input"
            />
            <FiSearch className="search-icon" />
            {showSearchPing && <div className="search-ping animate"></div>}
            {searchTerm && (
              <button className="search-clear" onClick={() => setSearchTerm("")} aria-label="Clear search">
                <FiX />
              </button>
            )}
          </div>
          
          <div className="category-filter-container">
            <select 
              value={selectedCategory}
              onChange={(e) => setSelectedCategory(e.target.value)}
              className="category-filter"
            >
              <option value="">All Categories</option>
              {categories.map((category) => (
                <option key={category} value={category}>
                  {category}
                </option>
              ))}
            </select>
            <FiFilter className="category-icon" />
          </div>
          
          {isFiltering && (
            <button
              onClick={() => {
                setSearchTerm("");
                setSelectedCategory("");
              }}
              className="clear-filters-button"
              aria-label="Clear all filters"
            >
              <FiRefreshCw className="button-icon" />
              <span>Reset Filters</span>
            </button>
          )}
          
          {/* Results count indicator */}
          <div className="filter-results-count">
            <span className="count-icon">
              {isFiltering ? <FiFilter /> : <FiTag />}
            </span>
            <span>{filteredEntries.length} {filteredEntries.length === 1 ? 'entry' : 'entries'}</span>
          </div>
        </div>
      </div>
      
      <div className="entries-list">
        {filteredEntries.length === 0 ? (
          <p className="no-entries">No journal entries found</p>
        ) : (
          filteredEntries.map((entry, index) => (
            <EnhancedCard key={entry.id} className="entry-card" delay={index}>
              <Link to={`/view/${entry.id}`} className="entry-link">
                <h3 className="entry-title">{entry.title}</h3>
                <div className="entry-meta">
                  <span className="entry-date">{formatDate(entry.date)}</span>
                  {entry.categories && entry.categories.length > 0 && (
                    <CategoryDisplay categories={entry.categories} maxVisible={2} />
                  )}
                </div>
                <p className="entry-excerpt">{entry.excerpt}</p>
              </Link>
              <div className="entry-actions entry-actions-bottom">
                <Link to={`/edit/${entry.id}`} className="edit-button" title="Edit">
                  <EditIcon />
                </Link>
                <button 
                  onClick={(e) => handleDelete(entry.id, e)} 
                  className="delete-button"
                  title="Delete"
                >
                  <DeleteIcon />
                </button>
              </div>
            </EnhancedCard>
          ))
        )}
      </div>
      
      <Link to="/new" className="new-entry-button">
        New Journal Entry
      </Link>
    </div>
  );
}

export default JournalList;
